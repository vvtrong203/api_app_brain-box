// <auto-generated />
using BrainBoxAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BrainBoxAPI.Migrations
{
    [DbContext(typeof(BrainBoxDbContext))]
    [Migration("20250707043800_create")]
    partial class create
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BrainBoxAPI.Models.Bookmark", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.Property<long>("BookmarkedAt")
                        .HasColumnType("bigint");

                    b.Property<int?>("LastCardId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "QuizId");

                    b.HasIndex("LastCardId");

                    b.HasIndex("QuizId");

                    b.ToTable("Bookmarks");

                    b.HasData(
                        new
                        {
                            UserId = 2,
                            QuizId = 1,
                            BookmarkedAt = 1743752400000L,
                            LastCardId = 1
                        });
                });

            modelBuilder.Entity("BrainBoxAPI.Models.Challenge", b =>
                {
                    b.Property<int>("ChallengeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChallengeId"));

                    b.Property<int>("ChallengerId")
                        .HasColumnType("int");

                    b.Property<int>("ChallengerScore")
                        .HasColumnType("int");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<int>("OpponentId")
                        .HasColumnType("int");

                    b.Property<int>("OpponentScore")
                        .HasColumnType("int");

                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ChallengeId");

                    b.HasIndex("ChallengerId");

                    b.HasIndex("OpponentId");

                    b.HasIndex("QuizId");

                    b.ToTable("Challenges");

                    b.HasData(
                        new
                        {
                            ChallengeId = 1,
                            ChallengerId = 1,
                            ChallengerScore = 0,
                            CreatedAt = 1743752400000L,
                            OpponentId = 2,
                            OpponentScore = 0,
                            QuizId = 1,
                            Status = 0
                        });
                });

            modelBuilder.Entity("BrainBoxAPI.Models.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<int>("DocDetailId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CommentId");

                    b.HasIndex("DocDetailId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            CommentId = 1,
                            Content = "Nice image!",
                            CreatedAt = 1743752400000L,
                            DocDetailId = 1,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("BrainBoxAPI.Models.Document", b =>
                {
                    b.Property<int>("DocId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DocId"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Views")
                        .HasColumnType("int");

                    b.HasKey("DocId");

                    b.HasIndex("AuthorId");

                    b.ToTable("Documents");

                    b.HasData(
                        new
                        {
                            DocId = 1,
                            AuthorId = 1,
                            Content = "trong docs này chúng tôi dạy bạn android cơ bản nè",
                            CreatedAt = 1743752400000L,
                            IsPublic = true,
                            Title = "Android cơ bản",
                            Views = 10
                        },
                        new
                        {
                            DocId = 2,
                            AuthorId = 2,
                            Content = "trong doc này chúng tôi hướng dẫn bạn về c# API",
                            CreatedAt = 1743752400000L,
                            IsPublic = false,
                            Title = "ASP.NET core API",
                            Views = 5
                        });
                });

            modelBuilder.Entity("BrainBoxAPI.Models.DocumentDetail", b =>
                {
                    b.Property<int>("DocDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DocDetailId"));

                    b.Property<string>("Caption")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<int>("DocId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DocDetailId");

                    b.HasIndex("DocId");

                    b.ToTable("DocumentDetails");

                    b.HasData(
                        new
                        {
                            DocDetailId = 1,
                            Caption = "Giao diện Android Studio",
                            CreatedAt = 1743752400000L,
                            DocId = 1,
                            ImageUrl = "https://developer.android.com/static/studio/images/write/layout-editor.png?hl=vi"
                        },
                        new
                        {
                            DocDetailId = 2,
                            Caption = "XML Layout",
                            CreatedAt = 1743752400000L,
                            DocId = 1,
                            ImageUrl = "https://images.unsplash.com/photo-1580894894513-1a28cbb71ec4"
                        },
                        new
                        {
                            DocDetailId = 3,
                            Caption = "Tạo project đầu tiên",
                            CreatedAt = 1743752400000L,
                            DocId = 1,
                            ImageUrl = "https://developer.android.com/images/training/basics/firstapp/first-app-studio.png"
                        },
                        new
                        {
                            DocDetailId = 4,
                            Caption = "Activity Lifecycle",
                            CreatedAt = 1743752400000L,
                            DocId = 1,
                            ImageUrl = "https://images.unsplash.com/photo-1531482615713-2afd69097998"
                        },
                        new
                        {
                            DocDetailId = 5,
                            Caption = "Kết quả Hello World",
                            CreatedAt = 1743752400000L,
                            DocId = 1,
                            ImageUrl = "https://developer.android.com/images/training/basics/firstapp/hello-world.png"
                        },
                        new
                        {
                            DocDetailId = 6,
                            Caption = "Code Java cơ bản",
                            CreatedAt = 1743752400000L,
                            DocId = 1,
                            ImageUrl = "https://images.unsplash.com/photo-1580894746646-4af2bcfe7070"
                        },
                        new
                        {
                            DocDetailId = 7,
                            Caption = "Android Emulator",
                            CreatedAt = 1743752400000L,
                            DocId = 1,
                            ImageUrl = "https://developer.android.com/images/training/basics/firstapp/emulator.png"
                        },
                        new
                        {
                            DocDetailId = 8,
                            Caption = "Thiết kế UI",
                            CreatedAt = 1743752400000L,
                            DocId = 1,
                            ImageUrl = "https://images.unsplash.com/photo-1517336714731-489689fd1ca8"
                        },
                        new
                        {
                            DocDetailId = 9,
                            Caption = "Cấu trúc project",
                            CreatedAt = 1743752400000L,
                            DocId = 1,
                            ImageUrl = "https://developer.android.com/images/training/basics/firstapp/project-structure.png"
                        },
                        new
                        {
                            DocDetailId = 10,
                            Caption = "Logcat Output",
                            CreatedAt = 1743752400000L,
                            DocId = 1,
                            ImageUrl = "https://developer.android.com/images/training/basics/firstapp/logcat.png"
                        },
                        new
                        {
                            DocDetailId = 11,
                            Caption = "Swagger UI",
                            CreatedAt = 1743752400000L,
                            DocId = 2,
                            ImageUrl = "https://learn.microsoft.com/en-us/aspnet/core/tutorials/web-api-help-page/_static/help-page-api.png"
                        },
                        new
                        {
                            DocDetailId = 12,
                            Caption = "Tạo Controller",
                            CreatedAt = 1743752400000L,
                            DocId = 2,
                            ImageUrl = "https://learn.microsoft.com/en-us/aspnet/core/tutorials/web-api-help-page/_static/add-controller.png"
                        },
                        new
                        {
                            DocDetailId = 13,
                            Caption = "ConfigureServices()",
                            CreatedAt = 1743752400000L,
                            DocId = 2,
                            ImageUrl = "https://learn.microsoft.com/en-us/aspnet/core/tutorials/web-api-help-page/_static/configure-services.png"
                        },
                        new
                        {
                            DocDetailId = 14,
                            Caption = "Xác thực JWT",
                            CreatedAt = 1743752400000L,
                            DocId = 2,
                            ImageUrl = "https://learn.microsoft.com/en-us/aspnet/core/tutorials/web-api-help-page/_static/jwt-auth.png"
                        },
                        new
                        {
                            DocDetailId = 15,
                            Caption = "Controller code",
                            CreatedAt = 1743752400000L,
                            DocId = 2,
                            ImageUrl = "https://learn.microsoft.com/en-us/aspnet/core/tutorials/web-api-help-page/_static/controller-code.png"
                        },
                        new
                        {
                            DocDetailId = 16,
                            Caption = "Sơ đồ Database",
                            CreatedAt = 1743752400000L,
                            DocId = 2,
                            ImageUrl = "https://learn.microsoft.com/en-us/aspnet/core/tutorials/web-api-help-page/_static/database-diagram.png"
                        },
                        new
                        {
                            DocDetailId = 17,
                            Caption = "Request mẫu",
                            CreatedAt = 1743752400000L,
                            DocId = 2,
                            ImageUrl = "https://learn.microsoft.com/en-us/aspnet/core/tutorials/web-api-help-page/_static/http-request.png"
                        },
                        new
                        {
                            DocDetailId = 18,
                            Caption = "Cấu hình JWT",
                            CreatedAt = 1743752400000L,
                            DocId = 2,
                            ImageUrl = "https://learn.microsoft.com/en-us/aspnet/core/tutorials/web-api-help-page/_static/appsettings.png"
                        },
                        new
                        {
                            DocDetailId = 19,
                            Caption = "Entity Model",
                            CreatedAt = 1743752400000L,
                            DocId = 2,
                            ImageUrl = "https://learn.microsoft.com/en-us/aspnet/core/tutorials/web-api-help-page/_static/entity-model.png"
                        },
                        new
                        {
                            DocDetailId = 20,
                            Caption = "Kết nối DB",
                            CreatedAt = 1743752400000L,
                            DocId = 2,
                            ImageUrl = "https://learn.microsoft.com/en-us/aspnet/core/tutorials/web-api-help-page/_static/database-connection.png"
                        });
                });

            modelBuilder.Entity("BrainBoxAPI.Models.DocumentTagCrossRef", b =>
                {
                    b.Property<int>("DocId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("DocId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("DocumentTagCrossRefs");

                    b.HasData(
                        new
                        {
                            DocId = 1,
                            TagId = 3
                        },
                        new
                        {
                            DocId = 1,
                            TagId = 4
                        },
                        new
                        {
                            DocId = 2,
                            TagId = 2
                        },
                        new
                        {
                            DocId = 2,
                            TagId = 4
                        });
                });

            modelBuilder.Entity("BrainBoxAPI.Models.DownloadHistory", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("TargetId")
                        .HasColumnType("int");

                    b.Property<string>("TargetType")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("DownloadedAt")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "TargetId", "TargetType");

                    b.ToTable("DownloadHistories");

                    b.HasData(
                        new
                        {
                            UserId = 3,
                            TargetId = 1,
                            TargetType = "document",
                            DownloadedAt = 1743752400000L
                        });
                });

            modelBuilder.Entity("BrainBoxAPI.Models.Flashcard", b =>
                {
                    b.Property<int>("CardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CardId"));

                    b.Property<int>("Answer")
                        .HasColumnType("int");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<int>("CreatorId")
                        .HasColumnType("int");

                    b.Property<string>("Option1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Option2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Option3")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Option4")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.HasKey("CardId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("QuizId");

                    b.ToTable("Flashcards");

                    b.HasData(
                        new
                        {
                            CardId = 1,
                            Answer = 2,
                            CreatedAt = 1743752400000L,
                            CreatorId = 3,
                            Option1 = "1",
                            Option2 = "2",
                            Option3 = "3",
                            Option4 = "4",
                            Question = "1 + 1 = ?",
                            QuizId = 1
                        },
                        new
                        {
                            CardId = 2,
                            Answer = 2,
                            CreatedAt = 1743752400000L,
                            CreatorId = 3,
                            Option1 = "3",
                            Option2 = "2",
                            Option3 = "1",
                            Option4 = "0",
                            Question = "5 - 3 = ?",
                            QuizId = 1
                        },
                        new
                        {
                            CardId = 3,
                            Answer = 2,
                            CreatedAt = 1743752400000L,
                            CreatorId = 3,
                            Option1 = "6",
                            Option2 = "8",
                            Option3 = "10",
                            Option4 = "12",
                            Question = "4 × 2 = ?",
                            QuizId = 1
                        },
                        new
                        {
                            CardId = 4,
                            Answer = 3,
                            CreatedAt = 1743752400000L,
                            CreatorId = 3,
                            Option1 = "1",
                            Option2 = "2",
                            Option3 = "3",
                            Option4 = "4",
                            Question = "9 ÷ 3 = ?",
                            QuizId = 1
                        },
                        new
                        {
                            CardId = 5,
                            Answer = 2,
                            CreatedAt = 1743752400000L,
                            CreatorId = 3,
                            Option1 = "2",
                            Option2 = "4",
                            Option3 = "6",
                            Option4 = "8",
                            Question = "2² = ?",
                            QuizId = 1
                        },
                        new
                        {
                            CardId = 6,
                            Answer = 2,
                            CreatedAt = 1743752400000L,
                            CreatorId = 3,
                            Option1 = "3",
                            Option2 = "4",
                            Option3 = "5",
                            Option4 = "6",
                            Question = "√16 = ?",
                            QuizId = 1
                        },
                        new
                        {
                            CardId = 7,
                            Answer = 3,
                            CreatedAt = 1743752400000L,
                            CreatorId = 3,
                            Option1 = "0",
                            Option2 = "1",
                            Option3 = "2",
                            Option4 = "3",
                            Question = "10 % 3 = ?",
                            QuizId = 1
                        },
                        new
                        {
                            CardId = 8,
                            Answer = 1,
                            CreatedAt = 1743752400000L,
                            CreatorId = 3,
                            Option1 = "17",
                            Option2 = "20",
                            Option3 = "23",
                            Option4 = "24",
                            Question = "3 + 7 × 2 = ?",
                            QuizId = 1
                        },
                        new
                        {
                            CardId = 9,
                            Answer = 2,
                            CreatedAt = 1743752400000L,
                            CreatorId = 3,
                            Option1 = "4",
                            Option2 = "5",
                            Option3 = "6",
                            Option4 = "7",
                            Question = "15 ÷ (3 × 1) = ?",
                            QuizId = 1
                        },
                        new
                        {
                            CardId = 10,
                            Answer = 3,
                            CreatedAt = 1743752400000L,
                            CreatorId = 3,
                            Option1 = "42",
                            Option2 = "48",
                            Option3 = "49",
                            Option4 = "56",
                            Question = "7 × 7 = ?",
                            QuizId = 1
                        },
                        new
                        {
                            CardId = 11,
                            Answer = 2,
                            CreatedAt = 1743752400000L,
                            CreatorId = 3,
                            Option1 = "18",
                            Option2 = "20",
                            Option3 = "22",
                            Option4 = "24",
                            Question = "12 + 8 = ?",
                            QuizId = 1
                        },
                        new
                        {
                            CardId = 12,
                            Answer = 3,
                            CreatedAt = 1743752400000L,
                            CreatorId = 3,
                            Option1 = "45",
                            Option2 = "50",
                            Option3 = "55",
                            Option4 = "60",
                            Question = "100 - 45 = ?",
                            QuizId = 1
                        },
                        new
                        {
                            CardId = 13,
                            Answer = 3,
                            CreatedAt = 1743752400000L,
                            CreatorId = 3,
                            Option1 = "6",
                            Option2 = "9",
                            Option3 = "27",
                            Option4 = "81",
                            Question = "3³ = ?",
                            QuizId = 1
                        },
                        new
                        {
                            CardId = 14,
                            Answer = 1,
                            CreatedAt = 1743752400000L,
                            CreatorId = 3,
                            Option1 = "0",
                            Option2 = "1000",
                            Option3 = "1",
                            Option4 = "∞",
                            Question = "0 × 1000 = ?",
                            QuizId = 1
                        },
                        new
                        {
                            CardId = 15,
                            Answer = 2,
                            CreatedAt = 1743752400000L,
                            CreatorId = 3,
                            Option1 = "3.12",
                            Option2 = "3.14",
                            Option3 = "3.16",
                            Option4 = "3.18",
                            Question = "What is the value of π (approx)?",
                            QuizId = 1
                        },
                        new
                        {
                            CardId = 16,
                            Answer = 3,
                            CreatedAt = 1743752400000L,
                            CreatorId = 3,
                            Option1 = "42",
                            Option2 = "46",
                            Option3 = "48",
                            Option4 = "54",
                            Question = "6 × 8 = ?",
                            QuizId = 1
                        },
                        new
                        {
                            CardId = 17,
                            Answer = 1,
                            CreatedAt = 1743752400000L,
                            CreatorId = 3,
                            Option1 = "10",
                            Option2 = "15",
                            Option3 = "20",
                            Option4 = "25",
                            Question = "50 ÷ 5 = ?",
                            QuizId = 1
                        },
                        new
                        {
                            CardId = 18,
                            Answer = 1,
                            CreatedAt = 1743752400000L,
                            CreatorId = 3,
                            Option1 = "6",
                            Option2 = "8",
                            Option3 = "4",
                            Option4 = "2",
                            Question = "2 + 2 × 2 = ?",
                            QuizId = 1
                        },
                        new
                        {
                            CardId = 19,
                            Answer = 2,
                            CreatedAt = 1743752400000L,
                            CreatorId = 3,
                            Option1 = "15",
                            Option2 = "20",
                            Option3 = "25",
                            Option4 = "30",
                            Question = "25% of 80 = ?",
                            QuizId = 1
                        },
                        new
                        {
                            CardId = 20,
                            Answer = 3,
                            CreatedAt = 1743752400000L,
                            CreatorId = 3,
                            Option1 = "8",
                            Option2 = "12",
                            Option3 = "16",
                            Option4 = "20",
                            Question = "Area of square with side 4?",
                            QuizId = 1
                        },
                        new
                        {
                            CardId = 21,
                            Answer = 2,
                            CreatedAt = 1743752400000L,
                            CreatorId = 3,
                            Option1 = "sad",
                            Option2 = "joyful",
                            Option3 = "angry",
                            Option4 = "tired",
                            Question = "Từ đồng nghĩa của 'happy' là gì?",
                            QuizId = 2
                        },
                        new
                        {
                            CardId = 22,
                            Answer = 3,
                            CreatedAt = 1743752400000L,
                            CreatorId = 3,
                            Option1 = "slow",
                            Option2 = "confused",
                            Option3 = "fast",
                            Option4 = "hard",
                            Question = "'Rapid' nghĩa là gì?",
                            QuizId = 2
                        },
                        new
                        {
                            CardId = 23,
                            Answer = 1,
                            CreatedAt = 1743752400000L,
                            CreatorId = 3,
                            Option1 = "modern",
                            Option2 = "old",
                            Option3 = "historic",
                            Option4 = "antique",
                            Question = "Từ trái nghĩa với 'ancient' là gì?",
                            QuizId = 2
                        },
                        new
                        {
                            CardId = 24,
                            Answer = 2,
                            CreatedAt = 1743752400000L,
                            CreatorId = 3,
                            Option1 = "accomodate",
                            Option2 = "accommodate",
                            Option3 = "acommodate",
                            Option4 = "accomadate",
                            Question = "Chọn từ có cách viết đúng:",
                            QuizId = 2
                        },
                        new
                        {
                            CardId = 25,
                            Answer = 1,
                            CreatedAt = 1743752400000L,
                            CreatorId = 3,
                            Option1 = "kind",
                            Option2 = "strong",
                            Option3 = "fast",
                            Option4 = "silent",
                            Question = "'Benevolent' gần nghĩa nhất với từ nào?",
                            QuizId = 2
                        },
                        new
                        {
                            CardId = 26,
                            Answer = 3,
                            CreatedAt = 1743752400000L,
                            CreatorId = 3,
                            Option1 = "willing",
                            Option2 = "eager",
                            Option3 = "hesitant",
                            Option4 = "excited",
                            Question = "'Reluctant' nghĩa là gì?",
                            QuizId = 2
                        },
                        new
                        {
                            CardId = 27,
                            Answer = 1,
                            CreatedAt = 1743752400000L,
                            CreatorId = 3,
                            Option1 = "reluctant",
                            Option2 = "aggressive",
                            Option3 = "lazy",
                            Option4 = "honest",
                            Question = "Fill in the blank: He is ___ to help.",
                            QuizId = 2
                        },
                        new
                        {
                            CardId = 28,
                            Answer = 2,
                            CreatedAt = 1743752400000L,
                            CreatorId = 3,
                            Option1 = "strong",
                            Option2 = "breakable",
                            Option3 = "heavy",
                            Option4 = "sharp",
                            Question = "'Fragile' means:",
                            QuizId = 2
                        },
                        new
                        {
                            CardId = 29,
                            Answer = 2,
                            CreatedAt = 1743752400000L,
                            CreatorId = 3,
                            Option1 = "scarce",
                            Option2 = "plentiful",
                            Option3 = "dangerous",
                            Option4 = "small",
                            Question = "The word 'abundant' means:",
                            QuizId = 2
                        },
                        new
                        {
                            CardId = 30,
                            Answer = 3,
                            CreatedAt = 1743752400000L,
                            CreatorId = 3,
                            Option1 = "run",
                            Option2 = "happy",
                            Option3 = "happiness",
                            Option4 = "quick",
                            Question = "Which is a noun?",
                            QuizId = 2
                        },
                        new
                        {
                            CardId = 31,
                            Answer = 2,
                            CreatedAt = 1743752400000L,
                            CreatorId = 3,
                            Option1 = "beauty",
                            Option2 = "beautiful",
                            Option3 = "beautifully",
                            Option4 = "beautify",
                            Question = "Choose the adjective:",
                            QuizId = 2
                        },
                        new
                        {
                            CardId = 32,
                            Answer = 2,
                            CreatedAt = 1743752400000L,
                            CreatorId = 3,
                            Option1 = "keeps everything",
                            Option2 = "shares a lot",
                            Option3 = "talks a lot",
                            Option4 = "eats a lot",
                            Question = "'Generous' is a person who:",
                            QuizId = 2
                        },
                        new
                        {
                            CardId = 33,
                            Answer = 3,
                            CreatedAt = 1743752400000L,
                            CreatorId = 3,
                            Option1 = "hopeful",
                            Option2 = "cheerful",
                            Option3 = "pessimistic",
                            Option4 = "positive",
                            Question = "Opposite of 'optimistic'?",
                            QuizId = 2
                        },
                        new
                        {
                            CardId = 34,
                            Answer = 2,
                            CreatedAt = 1743752400000L,
                            CreatorId = 3,
                            Option1 = "tiny",
                            Option2 = "huge",
                            Option3 = "normal",
                            Option4 = "average",
                            Question = "'Enormous' means:",
                            QuizId = 2
                        },
                        new
                        {
                            CardId = 35,
                            Answer = 2,
                            CreatedAt = 1743752400000L,
                            CreatorId = 3,
                            Option1 = "effect",
                            Option2 = "effective",
                            Option3 = "affect",
                            Option4 = "effectively",
                            Question = "'He is an ___ speaker.' Fill the blank",
                            QuizId = 2
                        },
                        new
                        {
                            CardId = 36,
                            Answer = 2,
                            CreatedAt = 1743752400000L,
                            CreatorId = 3,
                            Option1 = "long",
                            Option2 = "short",
                            Option3 = "deep",
                            Option4 = "boring",
                            Question = "'Brief' means:",
                            QuizId = 2
                        },
                        new
                        {
                            CardId = 37,
                            Answer = 3,
                            CreatedAt = 1743752400000L,
                            CreatorId = 3,
                            Option1 = "analysises",
                            Option2 = "analys",
                            Option3 = "analyses",
                            Option4 = "analysises",
                            Question = "What is the plural of 'analysis'?",
                            QuizId = 2
                        },
                        new
                        {
                            CardId = 38,
                            Answer = 2,
                            CreatedAt = 1743752400000L,
                            CreatorId = 3,
                            Option1 = "work",
                            Option2 = "works",
                            Option3 = "worked",
                            Option4 = "working",
                            Question = "Choose the correct word: He ___ every weekend.",
                            QuizId = 2
                        },
                        new
                        {
                            CardId = 39,
                            Answer = 1,
                            CreatedAt = 1743752400000L,
                            CreatorId = 3,
                            Option1 = "careful",
                            Option2 = "brave",
                            Option3 = "fast",
                            Option4 = "silent",
                            Question = "'Cautious' means:",
                            QuizId = 2
                        },
                        new
                        {
                            CardId = 40,
                            Answer = 3,
                            CreatedAt = 1743752400000L,
                            CreatorId = 3,
                            Option1 = "optional",
                            Option2 = "rare",
                            Option3 = "essential",
                            Option4 = "easy",
                            Question = "Which word means 'completely necessary'?",
                            QuizId = 2
                        });
                });

            modelBuilder.Entity("BrainBoxAPI.Models.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<long>("ReadAt")
                        .HasColumnType("bigint");

                    b.Property<int>("RelatedId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("NotificationId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new
                        {
                            NotificationId = 1,
                            Content = "You were challenged!",
                            CreatedAt = 1743752400000L,
                            IsRead = false,
                            ReadAt = 0L,
                            RelatedId = 1,
                            Type = "challenge",
                            UserId = 2
                        });
                });

            modelBuilder.Entity("BrainBoxAPI.Models.Quiz", b =>
                {
                    b.Property<int>("QuizId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuizId"));

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<int>("CreatorId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("QuizName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QuizId");

                    b.HasIndex("CreatorId");

                    b.ToTable("Quizzes");

                    b.HasData(
                        new
                        {
                            QuizId = 1,
                            CreatedAt = 1743752400000L,
                            CreatorId = 2,
                            Description = "Simple arithmetic quiz",
                            IsPublic = true,
                            QuizName = "Basic Math"
                        },
                        new
                        {
                            QuizId = 2,
                            CreatedAt = 1743752400000L,
                            CreatorId = 3,
                            Description = "Common English words",
                            IsPublic = true,
                            QuizName = "English Vocabulary"
                        });
                });

            modelBuilder.Entity("BrainBoxAPI.Models.RatingQuiz", b =>
                {
                    b.Property<int>("RatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RatingId"));

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.Property<long>("RatedAt")
                        .HasColumnType("bigint");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("RatingId");

                    b.HasIndex("QuizId");

                    b.HasIndex("UserId");

                    b.ToTable("RatingQuizzes");

                    b.HasData(
                        new
                        {
                            RatingId = 1,
                            Comment = "Rất dễ hiểu và trực quan!",
                            QuizId = 1,
                            RatedAt = 1743752400000L,
                            Rating = 5,
                            UserId = 1
                        },
                        new
                        {
                            RatingId = 2,
                            Comment = "Tốt nhưng có thể thêm câu hỏi nâng cao.",
                            QuizId = 1,
                            RatedAt = 1743752400000L,
                            Rating = 4,
                            UserId = 2
                        },
                        new
                        {
                            RatingId = 3,
                            Comment = "Câu hỏi hơi đơn giản.",
                            QuizId = 1,
                            RatedAt = 1743752400000L,
                            Rating = 3,
                            UserId = 3
                        },
                        new
                        {
                            RatingId = 4,
                            Comment = "Hoàn hảo cho người mới học toán.",
                            QuizId = 1,
                            RatedAt = 1743752400000L,
                            Rating = 5,
                            UserId = 4
                        },
                        new
                        {
                            RatingId = 5,
                            Comment = "Giao diện tốt, dễ thao tác.",
                            QuizId = 1,
                            RatedAt = 1743752400000L,
                            Rating = 4,
                            UserId = 5
                        },
                        new
                        {
                            RatingId = 6,
                            Comment = "Từ vựng phong phú, hữu ích.",
                            QuizId = 2,
                            RatedAt = 1743752400000L,
                            Rating = 4,
                            UserId = 1
                        },
                        new
                        {
                            RatingId = 7,
                            Comment = "Rất thích hợp ôn luyện IELTS.",
                            QuizId = 2,
                            RatedAt = 1743752400000L,
                            Rating = 5,
                            UserId = 2
                        },
                        new
                        {
                            RatingId = 8,
                            Comment = "Thiếu phần giải thích nghĩa từ.",
                            QuizId = 2,
                            RatedAt = 1743752400000L,
                            Rating = 3,
                            UserId = 3
                        },
                        new
                        {
                            RatingId = 9,
                            Comment = "Chất lượng tốt, đề phong phú.",
                            QuizId = 2,
                            RatedAt = 1743752400000L,
                            Rating = 4,
                            UserId = 4
                        },
                        new
                        {
                            RatingId = 10,
                            Comment = "Giúp mình mở rộng vốn từ rất nhiều.",
                            QuizId = 2,
                            RatedAt = 1743752400000L,
                            Rating = 5,
                            UserId = 5
                        });
                });

            modelBuilder.Entity("BrainBoxAPI.Models.Tag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TagId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TagId");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            TagId = 1,
                            Description = "Học tiếng anh",
                            TagName = "English"
                        },
                        new
                        {
                            TagId = 2,
                            Description = "học C# .Net",
                            TagName = ".Net"
                        },
                        new
                        {
                            TagId = 3,
                            Description = "học viết ứng dụng android",
                            TagName = "Android"
                        },
                        new
                        {
                            TagId = 4,
                            Description = "học làm thợ Code",
                            TagName = "Code"
                        },
                        new
                        {
                            TagId = 5,
                            Description = "học từ vựng",
                            TagName = "Vocabulary"
                        });
                });

            modelBuilder.Entity("BrainBoxAPI.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("PremiumExpiredAt")
                        .HasColumnType("bigint");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Avatar = "",
                            CreatedAt = 1743752400000L,
                            Email = "admin@brainbox.com",
                            Password = "8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92",
                            PremiumExpiredAt = 0L,
                            Role = "admin",
                            Status = true,
                            Username = "admin"
                        },
                        new
                        {
                            Id = 2,
                            Avatar = "",
                            CreatedAt = 1743752400000L,
                            Email = "teacher1@brainbox.com",
                            Password = "8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92",
                            PremiumExpiredAt = 0L,
                            Role = "teacher",
                            Status = true,
                            Username = "teacher1"
                        },
                        new
                        {
                            Id = 3,
                            Avatar = "",
                            CreatedAt = 1743752400000L,
                            Email = "teacher2@brainbox.com",
                            Password = "8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92",
                            PremiumExpiredAt = 0L,
                            Role = "teacher",
                            Status = true,
                            Username = "teacher2"
                        },
                        new
                        {
                            Id = 4,
                            Avatar = "",
                            CreatedAt = 1743752400000L,
                            Email = "user1@brainbox.com",
                            Password = "8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92",
                            PremiumExpiredAt = 0L,
                            Role = "user",
                            Status = true,
                            Username = "user1"
                        },
                        new
                        {
                            Id = 5,
                            Avatar = "",
                            CreatedAt = 1743752400000L,
                            Email = "user2@brainbox.com",
                            Password = "8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92",
                            PremiumExpiredAt = 0L,
                            Role = "user",
                            Status = true,
                            Username = "user2"
                        });
                });

            modelBuilder.Entity("BrainBoxAPI.Models.Bookmark", b =>
                {
                    b.HasOne("BrainBoxAPI.Models.Flashcard", "Flashcard")
                        .WithMany()
                        .HasForeignKey("LastCardId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("BrainBoxAPI.Models.Quiz", "Quiz")
                        .WithMany()
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BrainBoxAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Flashcard");

                    b.Navigation("Quiz");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BrainBoxAPI.Models.Challenge", b =>
                {
                    b.HasOne("BrainBoxAPI.Models.User", "Challenger")
                        .WithMany()
                        .HasForeignKey("ChallengerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BrainBoxAPI.Models.User", "Opponent")
                        .WithMany()
                        .HasForeignKey("OpponentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BrainBoxAPI.Models.Quiz", "Quiz")
                        .WithMany()
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Challenger");

                    b.Navigation("Opponent");

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("BrainBoxAPI.Models.Comment", b =>
                {
                    b.HasOne("BrainBoxAPI.Models.DocumentDetail", "DocumentDetail")
                        .WithMany()
                        .HasForeignKey("DocDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BrainBoxAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DocumentDetail");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BrainBoxAPI.Models.Document", b =>
                {
                    b.HasOne("BrainBoxAPI.Models.User", "Author")
                        .WithMany("Documents")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("BrainBoxAPI.Models.DocumentDetail", b =>
                {
                    b.HasOne("BrainBoxAPI.Models.Document", "Document")
                        .WithMany("DocumentDetails")
                        .HasForeignKey("DocId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");
                });

            modelBuilder.Entity("BrainBoxAPI.Models.DocumentTagCrossRef", b =>
                {
                    b.HasOne("BrainBoxAPI.Models.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BrainBoxAPI.Models.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("BrainBoxAPI.Models.DownloadHistory", b =>
                {
                    b.HasOne("BrainBoxAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BrainBoxAPI.Models.Flashcard", b =>
                {
                    b.HasOne("BrainBoxAPI.Models.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BrainBoxAPI.Models.Quiz", "Quiz")
                        .WithMany()
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("BrainBoxAPI.Models.Notification", b =>
                {
                    b.HasOne("BrainBoxAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BrainBoxAPI.Models.Quiz", b =>
                {
                    b.HasOne("BrainBoxAPI.Models.User", "Creator")
                        .WithMany("Quizzes")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("BrainBoxAPI.Models.RatingQuiz", b =>
                {
                    b.HasOne("BrainBoxAPI.Models.Quiz", "Quiz")
                        .WithMany()
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BrainBoxAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Quiz");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BrainBoxAPI.Models.Document", b =>
                {
                    b.Navigation("DocumentDetails");
                });

            modelBuilder.Entity("BrainBoxAPI.Models.User", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("Quizzes");
                });
#pragma warning restore 612, 618
        }
    }
}
